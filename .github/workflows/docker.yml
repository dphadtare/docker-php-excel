name: Docker

on:
  schedule:
    - cron: '0 10 * * *'
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push the images
        run: |
          for versionFilePath in $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} ${{ github.event.before }} | grep "Dockerfile");
          do
            if [[ "${versionFilePath}" != "Dockerfile.template" && "${versionFilePath}" != "Dockerfile" ]]; then
              folder=${versionFilePath%"/Dockerfile"}

              IFS='/' read -r -a image_path <<<"$folder"
              versionFolder="${image_path[0]}"
              versionName="${image_path[1]}"

              IMAGE_ID="dphadatare/phpexcel"

              docker buildx create --name mydockerbuilder --driver docker-container --bootstrap --use
              docker buildx build $folder --file $folder/Dockerfile --tag $versionName --platform linux/amd64,linux/arm64

              echo $IMAGE_ID
              echo $versionName

              if [ -f .versions.json ]; then
                  versionsHelper="$(<.versions.json)"
              elif [ -f versions.json ]; then
                versionsHelper="$(<versions.json)"
              else
                echo "versions.json file not found!"
                exit 1
              fi

              folderAliases=$(echo $versionsHelper | jq -r '.["'"${versionFolder}"'"].aliases')
              versionAliases=$(echo $folderAliases | jq -r '.["'"${versionName}"'"]')

              if [ "${versionAliases}" != null ]; then
                versionAliases="$(echo "${versionAliases}" | jq -r 'map(@sh) | join(" ")')"
                eval "versionAliases=( $versionAliases )"

                for aliase in "${variants[@]}"; do
                  docker tag $versionName $IMAGE_ID:$aliase
                  docker push $IMAGE_ID:$aliase
                done
              fi

              docker push $IMAGE_ID:$versionName
            fi
          done;
